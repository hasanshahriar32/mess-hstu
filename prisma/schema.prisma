// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Main Prisma schema file

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  mobile      String?
  passwordHash String
  role        String   @default("user")
  isActive    Boolean  @default(true)
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messGroups  MessGroup[]
  bookings    Booking[]
  orders      Order[]
}

// MessGroup model
model MessGroup {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  location       String
  category       String
  pricePerMonth  Float
  capacity       Int
  availableSeats Int
  singleSeats    Int      @default(0)
  singlePrice    Float    @default(0)
  doubleSeats    Int      @default(0)
  doublePrice    Float    @default(0)
  contactPhone   String?
  contactEmail   String?
  address        String?
  amenities      Json     @default("[]")
  images         Json     @default("[]")
  ownerId        Int
  isActive       Boolean  @default(true)
  rating         Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  owner          User     @relation(fields: [ownerId], references: [id])
  bookings       Booking[]
  orders         Order[]
}

// Booking model
model Booking {
  id          Int      @id @default(autoincrement())
  userId      Int
  messGroupId Int
  bookingDate DateTime @default(now())
  startDate   DateTime
  endDate     DateTime?
  status      String   @default("pending")
  totalAmount Float?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  messGroup   MessGroup @relation(fields: [messGroupId], references: [id])
}

// Order model
model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  messGroupId Int
  roomType    String   @default("single")
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  messGroup   MessGroup @relation(fields: [messGroupId], references: [id])
  transactions Transaction[]
}

// Transaction model
model Transaction {
  id                   Int      @id @default(autoincrement())
  orderId              Int
  amount               Float
  currency             String   @default("BDT")
  status               String   @default("pending")
  paymentMethod        String?
  stripePaymentIntentId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  order                Order    @relation(fields: [orderId], references: [id])
}
