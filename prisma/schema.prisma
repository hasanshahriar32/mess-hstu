// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Main Prisma schema file

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../public/erd.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// users model
model users {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  mobile      String?
  password_hash String  @map("password_hash")
  role        String   @default("user")
  is_active   Boolean  @default(true) @map("is_active")
  is_approved Boolean  @default(false) @map("is_approved")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @default(now()) @updatedAt @map("updated_at")
  messGroups  mess_groups[]
  bookings    bookings[]
  orders      orders[]
}

// MessGroup model
model mess_groups {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  location       String
  category       String
  price_per_month Float   @map("price_per_month")
  capacity       Int
  available_seats Int     @map("available_seats")
  contact_phone  String?  @map("contact_phone")
  contact_email  String?  @map("contact_email")
  address        String?
  amenities      Json     @default("[]")
  images         Json     @default("[]")
  owner_id       Int?     @map("owner_id")
  is_active      Boolean  @default(true) @map("is_active")
  rating         Int      @default(0)
  single_seats   Int      @default(0) @map("single_seats")
  single_price   Float    @default(0) @map("single_price")
  double_seats   Int      @default(0) @map("double_seats")
  double_price   Float    @default(0) @map("double_price")
  created_at     DateTime @default(now()) @map("created_at")
  updated_at     DateTime @default(now()) @updatedAt @map("updated_at")
  owner          users?    @relation(fields: [owner_id], references: [id])
  bookings       bookings[]
  orders         orders[]
}

// Booking model
model bookings {
  id          Int      @id @default(autoincrement())
  user_id     Int      @map("user_id")
  mess_group_id Int    @map("mess_group_id")
  booking_date DateTime @default(now()) @map("booking_date")
  start_date  DateTime @db.Date @map("start_date")
  end_date    DateTime? @db.Date @map("end_date")
  status      String   @default("pending")
  total_amount Float?  @map("total_amount")
  notes       String?
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @default(now()) @updatedAt @map("updated_at")
  user        users     @relation(fields: [user_id], references: [id])
  messGroup   mess_groups @relation(fields: [mess_group_id], references: [id])
}

// Order model
model orders {
  id          Int      @id @default(autoincrement())
  user_id     Int      @map("user_id")
  mess_group_id Int    @map("mess_group_id")
  room_type   String   @default("single") @map("room_type")
  status      String   @default("pending")
  created_at  DateTime @default(now()) @map("created_at")
  user        users     @relation(fields: [user_id], references: [id])
  messGroup   mess_groups @relation(fields: [mess_group_id], references: [id])
  transactions transactions[]
}

// Transaction model
model transactions {
  id                   Int      @id @default(autoincrement())
  order_id             Int      @map("order_id")
  amount               Float
  currency             String   @default("BDT")
  status               String   @default("pending")
  payment_method       String?  @map("payment_method")
  stripe_payment_intent_id String? @map("stripe_payment_intent_id")
  created_at           DateTime @default(now()) @map("created_at")
  updated_at           DateTime @default(now()) @updatedAt @map("updated_at")
  order                orders    @relation(fields: [order_id], references: [id])
}
